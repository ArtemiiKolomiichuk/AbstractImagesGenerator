@page "/gen"
@page "/gen/{QId}"
@using Newtonsoft.Json
@using System.Text
@implements IAsyncDisposable

@Home.Header()
<LayersModal @ref="LayersModal" />
<ColorModal @ref="ColorModal" />
<div id="generation-content">
    <div class="generation-block" style="display: flex; justify-content: center; align-items: center;">
        <div class="image-block" style="display:flex; flex-direction: column;">
            <UpdatableImage ImageSrc="@imageSrc" Id="main-img" Loading="@generating" ErrorMessage="@errorMessage"/>
            <div style="display:flex; margin: 0.5rem 0; align-items: center; justify-content: center;">
                <Selector Options="@ResolutionOptions" Title="640x480" OnSelect="(s) => {resolution = s; StateHasChanged();}" Class="selector" />
                <button class="bttn" @onclick="GenerateImage" disabled="@generating">Generate Image</button>
                <div class="download-container">
                    <a class="download" title="Download" href="@imageSrc" download="image.png">
                        <Ico Class="download-ico" Icon="@Icons.Download" Size="2.6" Color="#cccccc" />
                    </a>
                    <span class="share" @onclick="async() => {
                            var id = await SaveQuery();
                            if (id != null)
                            {
                                await JS.InvokeVoidAsync(saveToClipboardComm, id);
                            }
                        }">
                        <Ico Class="share-ico" Icon="@Icons.Share" Size="2.6" Color="#cccccc" />
                    </span>
                </div>
            </div>
        </div>
        <div class="layers-list" style="display:flex; flex-direction: column;">
            @if (blending != null)
            {
                <LayerCard Layer="blending" Update="StateHasChanged" ParentList="null" />
            }
        </div>
    </div>
</div>

@inject IJSRuntime JS
@inject NavigationManager NavManager
@code{
    [Parameter]
    public string? QId { get; set; } = null;
    private const string saveToClipboardComm = "copyToClipboard";

    private string imageSrc = "default.png";
    private string? errorMessage = null;
    public static Blending blending;
    public static LayersModal LayersModal;
    public static ColorModal ColorModal;
    private bool generating = false;
    private List<string> ResolutionOptions = ["800x600", "1024x1024", "1280x720", "1920x1080", "1920x1200", "2160x1080", "2560x1440", "2560x2560", "3840x2160"];
    private string resolution = "640x480";

    private IJSObjectReference tourModule;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        try
        {
            blending = (await Blending.GetLayerOptions(NavManager)).First();
            if(QId != null)
            {
                generating = true;
                StateHasChanged();
                try
                {
                    var httpClient = new HttpClient();
                    HttpResponseMessage response;
                    if (QId.StartsWith("session"))
                    {
                        try
                        {
                            string? query = await JS.InvokeAsync<string?>("localStorage.getItem", "query");
                            string? image = await JS.InvokeAsync<string?>("localStorage.getItem", "image");
                            if (query != null && image != null)
                            {
                                try
                                {
                                    blending = (await QueryObject.Deconstruct(NavManager, query)).Value.Item1;
                                }
                                catch (Exception e)
                                {
                                    Console.Write(e.Message);
                                    Console.Write(e.StackTrace);
                                    errorMessage = "Couldn't load image";
                                    generating = false;
                                #if DEBUG
                                    imageSrc = "";
                                    errorMessage = "Loading image failed (c)\n\n";
                                    errorMessage += e.Message + '\n';
                                    errorMessage += e.StackTrace;
                                #endif
                                }

                                blending.Locked = true;

                                imageSrc = image;
                                errorMessage = null;
                                generating = false;
                            }
                            else
                            {
                                errorMessage = "No saved image found";
                            }
                            StateHasChanged();
                        }
                        catch (Exception e)
                        {
                            errorMessage = "No saved image found";
                            #if DEBUG
                                errorMessage = "Getting sessioned image failed (c)\n\n";
                                errorMessage += e.Message + '\n';
                                errorMessage += e.StackTrace;
                            #endif
                            StateHasChanged();
                            return;
                        }
                    }
                    else
                    {
                        var id = QId.Split(':')[1];
                        if (QId.StartsWith("share"))
                        {
                            response = await httpClient.GetAsync(Program.BaseApiUrl(NavManager) + $"/store-query/{id}?include_metadata=true&include_image=true");
                        }
                        else
                        {
                            response = await httpClient.GetAsync(Program.BaseApiUrl(NavManager) + $"/template-query/{id}?include_metadata=true&include_image=true");
                        }
                        if (response.IsSuccessStatusCode)
                        {
                            var parser = HttpMultipartParser.MultipartFormDataParser.Parse(await response.Content.ReadAsStreamAsync());
                            Stream imageStream = parser.Files[0].Data;
                            Stream jsonStream = parser.Files[1].Data;

                            using (StreamReader reader = new StreamReader(jsonStream))
                            {
                                var json = reader.ReadToEnd();
                                blending = (await QueryObject.Deconstruct(NavManager, json)).Value.Item1;
                                blending.Locked = true;
                                StateHasChanged();
                            }

                            imageSrc = $"data:image/jpg;base64,{Convert.ToBase64String(imageStream.ReadFully())}";
                            errorMessage = null;
                            generating = false;
                            StateHasChanged();
                        }
                        else
                        {
                            errorMessage = "No saved image found";
                            #if DEBUG
                                errorMessage = "Getting saved image failed failed (a)\n\n";
                                errorMessage += await response.Content.ReadAsStringAsync();
                            #endif
                        }
                    }
                }
                catch (Exception e)
                {
                    errorMessage = "No saved image found";
                    #if DEBUG
                        errorMessage = "Getting saved image failed(b)\n\n";
                        errorMessage += e.Message + '\n';
                        errorMessage += e.StackTrace;
                    #endif
                    StateHasChanged();
                }
            }
        }
        catch (Exception e)
        {
            errorMessage = "Server is unavailable, try again later";
            #if DEBUG
                errorMessage = "Fetching layer options failed\n\n";
                errorMessage += e.Message + '\n';
                errorMessage += e.StackTrace;
            #endif
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            tourModule = await JS.InvokeAsync<IJSObjectReference>("import", "./tour.js");
            if (!(await JS.InvokeAsync<string?>("localStorage.getItem", "tour_end") is string ended && ended == "yes"))
            {
                await tourModule.InvokeVoidAsync("startTour");
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async void GenerateImage()
    {
        if (blending == null)
        {
            errorMessage = "Reload the page to try again";
            StateHasChanged();
            return;
        }
        if (generating)
        {
            return;
        }
        var httpClient = new HttpClient();
        if (string.IsNullOrWhiteSpace(resolution))
        {
            resolution = "640x480";
        }
        var x = resolution.Split('x')[0];
        var y = resolution.Split('x')[1];
        try
        {
            var query = new QueryObject(int.Parse(x), int.Parse(y), blending);
            var str = JsonConvert.SerializeObject(query);
            var content = new StringContent(str, Encoding.UTF8, "application/json");
            generating = true;
            StateHasChanged();
            try
            {
                var response = await httpClient.PostAsync(Program.BaseApiUrl(NavManager) + "/image-generator/query/full?include_metadata=true", content);
                if (response.IsSuccessStatusCode)
                {
                    var parser = HttpMultipartParser.MultipartFormDataParser.Parse(await response.Content.ReadAsStreamAsync());
                    Stream imageStream = parser.Files[0].Data;
                    Stream jsonStream = parser.Files[1].Data;

                    using (StreamReader reader = new StreamReader(jsonStream))
                    {
                        var json = reader.ReadToEnd();
                        var blending = (await QueryObject.Deconstruct(NavManager, json)).Value.Item1;
                        if(blending.Seed != null)
                            Generation.blending.Seed = blending.Seed;
                        SetSeeds(Generation.blending.SubLayers, blending.SubLayers);
                        StateHasChanged();
                    }

                    imageSrc = $"data:image/jpg;base64,{Convert.ToBase64String(imageStream.ReadFully())}";
                    errorMessage = null;
                    generating = false;
                    StateHasChanged();
                }
                else
                {
                    generating = false;
                    errorMessage = "An error occurred while generating your image";
                    #if DEBUG
                        errorMessage = "Failure on response (a)\n\n";
                        errorMessage += await response.Content.ReadAsStringAsync();
                    #endif
                    StateHasChanged();
                }
            }
            catch (Exception e)
            {
                generating = false;
                errorMessage = "Server is unavailable, try again later";
                #if DEBUG
                    errorMessage = "Exception on response (b)\n\n";
                    errorMessage += e.Message + '\n';
                    errorMessage += e.StackTrace;
                #endif
                StateHasChanged();
            }        
        }
        catch (Exception e)
        {
            generating = false;
            errorMessage = "An error occurred while generating your image";
            #if DEBUG
                errorMessage = "A problem with query\n\n";
                errorMessage += e.Message + '\n';
                errorMessage += e.StackTrace;
            #endif
            StateHasChanged();
        }
    }

    private void SetSeeds(List<Layer> layers, List<Layer> newLayers)
    {
        for (int i = 0; i < layers.Count; i++)
        {
            if (newLayers[i].Seed != null)
                layers[i].Seed = newLayers[i].Seed;
            if(layers[i] is Blending blendingTo && blendingTo.SubLayers != null && newLayers[i] is Blending blendingFrom)
            {
                SetSeeds(blendingTo.SubLayers, blendingFrom.SubLayers);
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        await tourModule.InvokeVoidAsync("stopTour");
        await tourModule.DisposeAsync();
    }

    private async Task<string?> SaveQuery()
    {
        string? id = null;
        var httpClient = new HttpClient();
        if (string.IsNullOrWhiteSpace(resolution))
        {
            resolution = "640x480";
        }
        var x = resolution.Split('x')[0];
        var y = resolution.Split('x')[1];
        try
        {
            var blending = Generation.blending.Copy;
            blending.Locked = true;
            var query = new QueryObject(int.Parse(x), int.Parse(y), blending);
            var str = JsonConvert.SerializeObject(query);
            var content = new StringContent(str, Encoding.UTF8, "application/json");
            generating = true;
            StateHasChanged();
            try
            {
                var response = await httpClient.PostAsync(Program.BaseApiUrl(NavManager) + "/store-query/full", content);
                if (response.IsSuccessStatusCode)
                {
                    var responseString = await response.Content.ReadAsStringAsync();
                    id = JsonConvert.DeserializeObject<Dictionary<string, string>>(responseString)?["query_id"];
                }
                generating = false;
            }
            catch (Exception e)
            {
                generating = false;
                errorMessage = "An error occurred while saving your image";
                #if DEBUG
                    errorMessage = "Failure on response (a)\n\n";
                    errorMessage += e.Message + '\n';
                    errorMessage += e.StackTrace;
                #endif
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            generating = false;
            errorMessage = "An error occurred while saving your image";
            #if DEBUG
                errorMessage = "A problem with query\n\n";
                errorMessage += e.Message + '\n';
                errorMessage += e.StackTrace;
            #endif
            StateHasChanged();
        }
        if(id != null)
        {
            id = $"{NavManager.BaseUri}gen/share:{id}";
        }
        return id;
    }
}
