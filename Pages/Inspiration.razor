@page "/inspiration"
<style>
    #app{
        display: block !important;
    }
</style>

@Home.Header()
<div id="subheader">
    <div id="subheader-image-text">
        <img src="main-back.png" alt="abstract-background" />
        <span id="img-text">
            Random Images
        </span>
    </div>
</div>

<div id="gallery" class="gallery-page">
    <div id="gallery-items">
        @foreach (var (query, image) in images)
        {
            <GalleryImage Image="@image" Query="@query" OnClick="async() => await LoadImage(query, image)"/>
        }
    </div>
</div>
<button @onclick="async () => await LoadMoreImages()">
    Load More
</button>

@using System.Text
@using Newtonsoft.Json;
@inject IJSRuntime JS
@inject NavigationManager NavManager
@code {
    private const string reqBody = "{\"width\": 320,\"height\": 240,\"count\": 5}";
    private const string uri = "/gen/session";
    List<(string query, string image)> images = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadMoreImages();
        StateHasChanged();
        await LoadMoreImages();
        StateHasChanged();
    }

    private async Task LoadMoreImages()
    {
        var client = new HttpClient();
        var uri = Program.BaseApiUrl(NavManager);
        uri += "/image-generator/query/random?include_metadata=true&include_image=true";
        var content = new StringContent(reqBody, Encoding.UTF8, "application/json");
        var response = await client.PostAsync(uri, content);
        if (response.IsSuccessStatusCode)
        {
            var parser = HttpMultipartParser.MultipartFormDataParser.Parse(await response.Content.ReadAsStreamAsync());
            for (int i = 0; i < parser.Files.Count; i += 2)
            {
                var file = parser.Files[i];
                Stream imageStream = parser.Files[i].Data;
                Stream jsonStream = parser.Files[i + 1].Data;
                using (StreamReader reader = new StreamReader(jsonStream))
                {
                    var json = reader.ReadToEnd();
                    var imageSrc = $"data:image/jpg;base64,{Convert.ToBase64String(imageStream.ReadFully())}";
                    images.Add((json, imageSrc));
                }
            }
        }
    }

    private async Task LoadImage(string query, string image)
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "image", image);
        await JS.InvokeVoidAsync("localStorage.setItem", "query", query);
        await Task.Delay(100);
        NavManager.NavigateTo("/gen/session");
    }
}
