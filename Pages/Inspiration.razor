@page "/inspiration"
@implements IAsyncDisposable
<style>
    #app{
        display: block !important;
    }
</style>

@Home.Header()
<div id="subheader">
    <div id="subheader-image-text">
        <img src="random-back.png" alt="abstract-background" />
        <span id="img-text">
            Random Images
        </span>
    </div>
</div>

<div id="gallery" class="gallery-page">
    <div id="gallery-items">
        @foreach (var (query, image) in images)
        {
            <GalleryImage Image="@image" Query="@query" OnClick="async() => await LoadImage(query, image)"/>
        }
    </div>
</div>


@using System.Text
@using Newtonsoft.Json;
@inject IJSRuntime JS
@inject NavigationManager NavManager
@code {
    private const string reqBody = "{\"width\": 320,\"height\": 240,\"count\": 8}";
    private const string uri = "/gen/session";
    List<(string query, string image)> images = [];
    private bool isLoading = false;
    private DotNetObjectReference<Inspiration> objRef;

    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        await LoadMoreImages();
        StateHasChanged();
        await LoadMoreImages();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("infiniteScrollHandler.initialize", objRef);
        }
    }

    [JSInvokable]
    public async Task OnScrollToBottom()
    {
        if (!isLoading)
        {
            await LoadMoreImages();
            StateHasChanged();
        }
    }

    private async Task LoadMoreImages()
    {
        if (isLoading) return;
        
        isLoading = true;
        StateHasChanged();
        
        try
        {
            var client = new HttpClient();
            var uri = Program.BaseApiUrl(NavManager);
            uri += "/image-generator/query/random?include_metadata=true&include_image=true";
            var content = new StringContent(reqBody, Encoding.UTF8, "application/json");
            var response = await client.PostAsync(uri, content);
            if (response.IsSuccessStatusCode)
            {
                var parser = HttpMultipartParser.MultipartFormDataParser.Parse(await response.Content.ReadAsStreamAsync());
                for (int i = 0; i < parser.Files.Count; i += 2)
                {
                    var file = parser.Files[i];
                    Stream imageStream = parser.Files[i].Data;
                    Stream jsonStream = parser.Files[i + 1].Data;
                    using (StreamReader reader = new StreamReader(jsonStream))
                    {
                        var json = reader.ReadToEnd();
                        var imageSrc = $"data:image/jpg;base64,{Convert.ToBase64String(imageStream.ReadFully())}";
                        images.Add((json, imageSrc));
                    }
                }
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadImage(string query, string image)
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "image", image);
        await JS.InvokeVoidAsync("localStorage.setItem", "query", query);
        await Task.Delay(100);
        NavManager.NavigateTo("/gen/session");
    }

    public async ValueTask DisposeAsync()
    {
        objRef?.Dispose();
        await JS.InvokeVoidAsync("infiniteScrollHandler.dispose");
    }
}
