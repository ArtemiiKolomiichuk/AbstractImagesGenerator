@page "/"
@using Newtonsoft.Json
@using System.Text

<LayersModal @ref="Modal" />

<div class="generation-block" style="display: flex; justify-content: center; align-items: center;">
    <div class="image-block" style="display:flex; flex-direction: column;">
        <UpdatableImage ImageSrc="@imageSrc" Id="main-img" Loading="@generating"/>
        <div style="display:flex; margin: 1rem 0; align-items: center; justify-content: center;">
            <button class="bttn" @onclick="GenerateImage">Generate Image</button>
        </div>
    </div>
    <div class="layers-list" style="display:flex; flex-direction: column;">
        @if (blending != null)
        {
            <LayerCard Layer="blending" Update="StateHasChanged" ParentList="null" />
        }
    </div>
</div>


@code{
    private string imageSrc = "R.jpg";
    private string? errorMessage = null;
    public static Blending blending;
    public static LayersModal Modal;
    private bool generating = false;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        blending = (await Blending.GetLayerOptions()).First();
    }

    private async void GenerateImage()
    {
        var httpClient = new HttpClient();
        var query = new QueryObject(1028, 1028, blending);
        var str = JsonConvert.SerializeObject(query);
        var content = new StringContent(str, Encoding.UTF8, "application/json");
        generating = true;
        StateHasChanged();
        var response = await httpClient.PostAsync(Program.BaseApiUrl + "/image-generator/query/full?include_metadata=true", content);
        if (response.IsSuccessStatusCode)
        {
            var parser = HttpMultipartParser.MultipartFormDataParser.Parse(await response.Content.ReadAsStreamAsync());
            Stream imageStream = parser.Files[0].Data;
            Stream jsonStream = parser.Files[1].Data;

            using (StreamReader reader = new StreamReader(jsonStream))
            {
                var json = reader.ReadToEnd();
                var blending = (await QueryObject.Deconstruct(json)).Value.Item1;
                Console.WriteLine(blending.Seed);
                Home.blending.Seed = blending.Seed;
                SetSeeds(Home.blending.SubLayers, blending.SubLayers);
                StateHasChanged();
            }
            
            imageSrc = $"data:image/jpg;base64,{Convert.ToBase64String(ReadFully(imageStream))}";
            generating = false;
            StateHasChanged();
        }
    }

    private static byte[] ReadFully(Stream input)
    {
        using (MemoryStream ms = new MemoryStream())
        {
            input.CopyTo(ms);
            return ms.ToArray();
        }
    }

    private void SetSeeds(List<Layer> layers, List<Layer> newLayers)
    {
        for (int i = 0; i < layers.Count; i++)
        {
            layers[i].Seed = newLayers[i].Seed;
            if(layers[i] is Blending blendingTo && blendingTo.SubLayers != null && newLayers[i] is Blending blendingFrom)
            {
                SetSeeds(blendingTo.SubLayers, blendingFrom.SubLayers);
            }
        }
    }
}
