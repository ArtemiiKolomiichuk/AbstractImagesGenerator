@page "/"
<style>
    #app{
    display: block !important;
    }
</style>

@Header()
<div id="subheader">
    <div id="subheader-image-text">
        <img src="main-back.png" alt="abstract-background" />
        <span id="img-text">
            Abstract Images
        </span>
    </div>
    <a href="/gen">
        Generate
    </a>
</div>
<p style="margin: 1rem; font-size: 1.2rem;">
    Unleash your creativity with our interactive wallpaper generator! 
    Adjust parameters like color saturation, noise level, symmetry, and geometric intensity using intuitive sliders.
    Choose from curated color palettes or generate your own, specify image dimensions, and export high-resolution PNG files.
    Instantly share your creations and explore an inspiration mode for fresh ideas. 
    Developers can integrate our powerful API for automated image generation. 
    Start designing your perfect wallpaper today!
</p>

<div id="gallery">
    <h1>Gallery</h1>
    <div id="gallery-items">
        @foreach (var (id, image) in gallery)
        {
            <div>
                <img style="cursor:pointer;" @onclick="() => {
                    NavigationManager.NavigateTo(uri + id);
                }" src="@image" />
            </div>
        }
    </div>
</div>

@using Newtonsoft.Json;
@inject NavigationManager NavigationManager
@code {
    private const string uri = "/gen/gallery:";
    List<(string id, string image)> gallery = [];

    protected override async Task OnInitializedAsync()
    {
        var client = new HttpClient();
        var response = await client.GetAsync(Program.BaseApiUrl + "/template-query/all?include_metadata=true&include_image=true&full_metadata=false");
        if (response.IsSuccessStatusCode)
        {
            var parser = HttpMultipartParser.MultipartFormDataParser.Parse(await response.Content.ReadAsStreamAsync());
            for (int i = 0; i < parser.Files.Count; i += 2)
            {
                Stream imageStream = parser.Files[i].Data;
                Stream jsonStream = parser.Files[i + 1].Data;
                var json = new StreamReader(jsonStream).ReadToEnd();
                var id = JsonConvert.DeserializeObject<Dictionary<string, string>>(json)?["template_query_id"];
                if (id != null)
                    gallery.Add((id, $"data:image/jpg;base64,{Convert.ToBase64String(imageStream.ReadFully())}"));
            }
            StateHasChanged();
        }
    }

    internal static RenderFragment Header()
    {
        return@<div id="header">
            <Ico Icon="@Icons.ArrowDownRight" />
            <a href="/">Home</a>
            <a href="/gen">Generate</a>
        </div>;
    }
}
