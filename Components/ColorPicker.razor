<div class="gradient-container"
     @onmousedown="StartDragging"
     @onmousemove="OnDragging"
     @onmouseup="StopDragging"
     @onmouseleave="StopDragging"
     style="@GradientBackgroundStyle">
    <div class="selector-indicator" style="@IndicatorStyle"></div>
</div>
<div class="hue-slider-container">
    <input type="range" min="0" max="360" value="@Hue" @oninput="OnHueChanged" class="hue-slider" style="@HueSliderStyle" />
</div>


@code {
    [Parameter]
    public string SelectedColor { get; set; } = "#FF0000";

    public void UpdateColor(string hex)
    {
        SelectedColor = hex;
        (Hue, Saturation, Value) = HexToHSV(SelectedColor);
        StateHasChanged();
    }

    [Parameter]
    public EventCallback<string> SelectedColorChanged { get; set; }

    private bool IsPopupOpen = false;

    private double Hue = 0;
    private double Saturation = 1.0;
    private double Value = 1.0;

    private const double GradientWidth = 200;
    private const double GradientHeight = 200;

    private bool isDragging = false;

    protected override void OnInitialized()
    {
        (Hue, Saturation, Value) = HexToHSV(SelectedColor);
        StateHasChanged();
    }

    private void TogglePopup() => IsPopupOpen = !IsPopupOpen;

    private void ClosePopup() => IsPopupOpen = false;

    private void StartDragging(MouseEventArgs e)
    {
        isDragging = true;
        UpdateSV(e);
    }

    private void OnDragging(MouseEventArgs e)
    {
        if (isDragging)
        {
            UpdateSV(e);
        }
    }

    private void StopDragging(MouseEventArgs _)
    {
        isDragging = false;
    }

    private void UpdateSV(MouseEventArgs e)
    {
        double x = e.OffsetX;
        double y = e.OffsetY;
        Saturation = Math.Clamp(x / GradientWidth, 0, 1);
        Value = Math.Clamp(1 - (y / GradientHeight), 0, 1);
        UpdateColor();
    }

    private void OnHueChanged(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value.ToString(), out double newHue))
        {
            Hue = newHue;
            UpdateColor();
        }
    }

    private void UpdateColor()
    {
        SelectedColor = HSVToHex(Hue, Saturation, Value);
        SelectedColorChanged.InvokeAsync(SelectedColor);
    }

    private string GradientBackgroundStyle =>
    $"width:{GradientWidth}px; height:{GradientHeight}px; " +
    "background-image: " +
        "linear-gradient(to right, #fff, transparent), " +
        "linear-gradient(to top, #000, transparent), " +
        $"linear-gradient(to right, #fff, hsla({Hue}, 100%, 50%, 1));";

    private string HueSliderStyle => $"--thumb-color: hsla({Hue}, 100%, 50%, 1);";

    private string IndicatorStyle
    {
        get
        {
            double left = Saturation * GradientWidth - 8; // Adjust for indicator size (16px)
            double top = (1 - Value) * GradientHeight - 8;
            return $"position:absolute; width:16px; height:16px; border:2px solid #fff; border-radius:50%; " +
                   $"box-shadow: 0 0 2px rgba(0,0,0,0.8); left:{left}px; top:{top}px; pointer-events:none;";
        }
    }

    private string HSVToHex(double h, double s, double v)
    {
        double c = v * s;
        double x = c * (1 - Math.Abs((h / 60 % 2) - 1));
        double m = v - c;
        double r1 = 0, g1 = 0, b1 = 0;

        if (h < 60)
        {
            r1 = c; g1 = x; b1 = 0;
        }
        else if (h < 120)
        {
            r1 = x; g1 = c; b1 = 0;
        }
        else if (h < 180)
        {
            r1 = 0; g1 = c; b1 = x;
        }
        else if (h < 240)
        {
            r1 = 0; g1 = x; b1 = c;
        }
        else if (h < 300)
        {
            r1 = x; g1 = 0; b1 = c;
        }
        else
        {
            r1 = c; g1 = 0; b1 = x;
        }

        int r = (int)Math.Round((r1 + m) * 255);
        int g = (int)Math.Round((g1 + m) * 255);
        int b = (int)Math.Round((b1 + m) * 255);
        return $"#{r:X2}{g:X2}{b:X2}";
    }

    private (double h, double s, double v) HexToHSV(string hex)
    {
        hex = hex.TrimStart('#');
        if (hex.Length == 3)
        {
            hex = string.Concat(hex.Select(c => $"{c}{c}"));
        }
        if (hex.Length != 6)
        {
            return (0, 0, 1);
        }
        int r = int.Parse(hex.Substring(0, 2), System.Globalization.NumberStyles.HexNumber);
        int g = int.Parse(hex.Substring(2, 2), System.Globalization.NumberStyles.HexNumber);
        int b = int.Parse(hex.Substring(4, 2), System.Globalization.NumberStyles.HexNumber);

        double rNorm = r / 255.0;
        double gNorm = g / 255.0;
        double bNorm = b / 255.0;

        double max = Math.Max(rNorm, Math.Max(gNorm, bNorm));
        double min = Math.Min(rNorm, Math.Min(gNorm, bNorm));
        double delta = max - min;

        double h = 0;
        if (delta > 0)
        {
            if (max == rNorm)
            {
                h = 60 * (((gNorm - bNorm) / delta) % 6);
            }
            else if (max == gNorm)
            {
                h = 60 * (((bNorm - rNorm) / delta) + 2);
            }
            else if (max == bNorm)
            {
                h = 60 * (((rNorm - gNorm) / delta) + 4);
            }
        }
        if (h < 0) h += 360;
        double s = (max == 0) ? 0 : delta / max;
        double v = max;
        return (h, s, v);
    }
}
