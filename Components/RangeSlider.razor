<div class="range-slider">
    <span class="value-label min-label" style="@($"left: calc({MinValuePercentage}% + {(Number)(MinValuePercentage.Value / 100 * -34 + 6)}px)")">@MinValue</span>
    <span class="value-label max-label" style="@($"left: calc({MaxValuePercentage}% + {(Number)(MaxValuePercentage.Value / 100 * -34 + 6)}px)")">@MaxValue</span>

    <input type="range"
           min="@Min.ToString()"
           max="@Max.ToString()"
           step="@Step.ToString()"
           value="@MinValue.ToString()"
           @onchange="e => MinValue = new (e.Value.ToString())"
          class="slider min-slider" />

    <input type="range"
        min="@Min.ToString()"
        max="@Max.ToString()"
        step="@Step.ToString()"
        value="@MaxValue.ToString()"
        @onchange="e => MaxValue = new(e.Value.ToString())"
        class="slider max-slider" />

    <div class="slider-track"></div>
</div>

@code {
    [Parameter]
    public Number Step { get; set; }

    [Parameter]
    public Number Max { get; set; }

    [Parameter]
    public Number Min { get; set; }

    private Number _minValue = 0;

    [Parameter]
    public Number MinValue
    {
        get => _minValue;
        set
        {
            _minValue = value;
            if(value.CompareTo(MaxValue) > 0)
            {
                if (!MaxValue.Equals(value))
                {
                    MaxValue = value;
                    return;
                }
            }
            StateHasChanged();
            OnChange?.Invoke((MinValue, MaxValue));
        }
    }

    private Number _maxValue = 0;

    [Parameter]
    public Number MaxValue
    {
        get => _maxValue;
        set
        {
            _maxValue = value;
            if(value.CompareTo(MinValue) < 0)
            {
                if (!MinValue.Equals(value))
                {
                    MinValue = value;
                    return;
                }
            }
            StateHasChanged();
            OnChange?.Invoke((MinValue, MaxValue));
        }
    }

    [Parameter]
    public Action<(Number, Number)>? OnChange { get; set; }

    public Number MinValuePercentage => (MinValue.Value - Min.Value) / (Max.Value - Min.Value) * 100;

    public Number MaxValuePercentage => (MaxValue.Value - Min.Value) / (Max.Value - Min.Value) * 100;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (MinValue.CompareTo(Min) < 0)
        {
            MinValue = Min;
        }
        if (MaxValue.CompareTo(Max) > 0)
        {
            MaxValue = Max;
        }
    }
}

