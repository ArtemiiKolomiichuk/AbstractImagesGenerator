@typeparam T where T : IComparable

<div class="range-slider">
    <span class="value-label min-label" style="@($"left: calc({MinValuePercentage}% + {(MinValuePercentage/100 * -34 + 6)}px)")">@MinValue</span>
    <span class="value-label max-label" style="@($"left: calc({MaxValuePercentage}% + {(MaxValuePercentage/100 * -34 + 6)}px)")">@MaxValue</span>

    <input type="range"
        min="@Min"
        max="@Max"
        step="@Step"
        @bind-value="@MinValue"
        class="slider min-slider" />

    <input type="range"
        min="@Min"
        max="@Max"
        step="@Step"
        @bind-value="@MaxValue"
        class="slider max-slider" />

    <div class="slider-track"></div>
</div>

@code {
    [Parameter]
    public T Step { get; set; }

    [Parameter]
    public T Max { get; set; }

    [Parameter]
    public T Min { get; set; }

    private T _minValue;

    [Parameter]
    public T MinValue
    {
        get => _minValue;
        set
        {
            _minValue = value;
            if(value.CompareTo(MaxValue) > 0)
            {
                if (!MaxValue.Equals(value))
                {
                    MaxValue = value;
                    return;
                }
            }
            StateHasChanged();
            OnChange?.Invoke((MinValue, MaxValue));
        }
    }

    private T _maxValue;

    [Parameter]
    public T MaxValue
    {
        get => _maxValue;
        set
        {
            _maxValue = value;
            if(value.CompareTo(MinValue) < 0)
            {
                if (!MinValue.Equals(value))
                {
                    MinValue = value;
                    return;
                }
            }
            StateHasChanged();
            OnChange?.Invoke((MinValue, MaxValue));
        }
    }

    [Parameter]
    public Action<(T, T)>? OnChange { get; set; }

    public double MinValuePercentage => (Convert.ToDouble(MinValue) - Convert.ToDouble(Min)) / (Convert.ToDouble(Max) - Convert.ToDouble(Min)) * 100;

    public double MaxValuePercentage => (Convert.ToDouble(MaxValue) - Convert.ToDouble(Min)) / (Convert.ToDouble(Max) - Convert.ToDouble(Min)) * 100;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (MinValue.CompareTo(Min) < 0)
        {
            MinValue = Min;
        }
        if (MaxValue.CompareTo(Max) > 0)
        {
            MaxValue = Max;
        }
    }
}

