@if (IsVisible)
{
    <div class="modal-overlay" @onclick="() => CloseModal(null)">
        <div class="modal-content" @onclick:stopPropagation="true">
            <h3>Blendings</h3>
            <div>
                @foreach (var layer in Blendings)
                {
                    <div style="display: flex; align-items: center;">
                        <Tooltip Text="@layer.Description" />
                        <span class="modal-item" @onclick="() => CloseModal(layer)">@layer.Title</span>
                    </div>
                }
            </div>
            @if (Drawings?.Count > 0)
            {
                <h3 style="padding-top: 1rem;">Drawings</h3>
                <div style="display: grid; grid-template-columns: repeat(2, 1fr); column-gap: 0.4rem;">
                    @foreach (var layer in Drawings)
                    {
                        <div style="display: flex; align-items: center;">
                            <Tooltip Text="@layer.Description" />
                            <span class="modal-item" @onclick="() => CloseModal(layer)">@layer.Title</span>
                        </div>
                    }
                </div>
            }
            <button class="modal-close-button" @onclick="() => CloseModal(null)">Close</button>
        </div>
    </div>
}

@code {
    private bool IsVisible { get; set; } = false;

    private List<Blending> Blendings { get; set; } = new();

    private List<Drawing> Drawings { get; set; } = new();

    private TaskCompletionSource<Layer?>? _tcs;

    public void SetLayers(Blending[] blendings, Drawing[] drawings)
    {
        Blendings = new(blendings);
        Drawings = new(drawings);
    }

    public Task<Layer?> ShowAsync()
    {
        IsVisible = true;
        _tcs = new();
        StateHasChanged();
        return _tcs.Task;
    }

    private void CloseModal(Layer? layer)
    {
        IsVisible = false;
        _tcs?.SetResult(layer);
        StateHasChanged();
    }
}