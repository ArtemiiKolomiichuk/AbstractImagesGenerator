@if (!string.IsNullOrWhiteSpace(Text))
{
    <div id="@($"tooltip-wrapper-{tooltipId}")" class="tooltip-wrapper" style="@(ChildContent == null ? "border-bottom:none" : "")" @onclick="Show" @onmouseenter="Show" @onmouseleave="Hide">
        <span class="tooltip-text">@Text</span>
        <div id="@($"tooltipBase-{tooltipId}")">
            @if (ChildContent is not null)
            {
                @ChildContent
            }
            else
            {
                <div class="tooltip-ico">
                    @((MarkupString)(Icons.Help
                    .Replace("height=\"24px\"", $"height=\"1.4rem\"")
                    .Replace("width=\"24px\"", $"width=\"1.4rem\"")
                    .Replace("\"#\"", $"\"#9a9a9a\"")))
                </div>
            }
        </div>
    </div>
}
else
{
    @ChildContent
}

@inject IJSRuntime JS
@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string Text { get; set; }
    private static int globaltooltipId;
    private int tooltipId;

    protected override Task OnParametersSetAsync()
    {
        if (tooltipId == 0) 
        {
            tooltipId = ++globaltooltipId;
        }
        return base.OnParametersSetAsync();
    }

    private async void Show()
    {
        await Task.Delay(10);
        await JS.InvokeVoidAsync("showTooltip", $"tooltip-wrapper-{tooltipId}", $"tooltipBase-{tooltipId}");
    }

    private async void Hide()
    {
        await JS.InvokeVoidAsync("hideTooltip", $"tooltip-wrapper-{tooltipId}");
    }
}