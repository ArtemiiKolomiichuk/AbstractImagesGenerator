@using System.Text.RegularExpressions
@if (IsVisible)
{
    <div class="color-modal-overlay" @onclick="() => CloseModal(null)" @onclick:stopPropagation="false">
        <div class="color-modal-content" style="@($"left:{offset.x}px; top:{offset.y}px;")" @onclick:stopPropagation="true">
            <ColorPicker @ref="ColorPicker" SelectedColor="@color" SelectedColorChanged="(c) => {color = c; onColorChanged?.Invoke(c);}" />
            <div class="color-footer">
                <span class="hex-container">
                    #<input class="hex-input" type="text" value="@(color[1..])" @onchange="e => {
                            string val = Hashtag + new string(e.Value!.ToString()!.Where(x => x != Hashtag).ToArray());
                            if (IsValidHexColor(val))
                            {
                                color = val;
                                ColorPicker.UpdateColor(val);
                                onColorChanged?.Invoke(color);
                            }}"/>
                </span>
                @if (canDelete)
                {
                    <span class="color-delete-block">
                        <button class="bttn color-delete" @onclick="DeleteColor">Delete</button>
                    </span>
                }
            </div>
        </div>
    </div>
}

@inject IJSRuntime JS
@code {
    private bool IsVisible { get; set; } = false;

    private TaskCompletionSource<(string?, bool)>? _tcs;

    private ColorPicker ColorPicker;

    private bool canDelete = false;

    private Action<string>? onColorChanged;

    private string color = "#FF0000";

    private static char Hashtag = '#';

    private (double x, double y) offset;

    public async Task Configure(MouseEventArgs e)
    {
        offset = (e.ClientX - e.OffsetX, e.ClientY - e.OffsetY + 36);
        bool putUp = await JS.InvokeAsync<bool>("isBottomPart", e.ClientY);
        if (putUp)
        {
            offset = (offset.x, e.ClientY - e.OffsetY - 36 - (canDelete ? 255 : 230));
        }
        bool fitsRight = await JS.InvokeAsync<bool>("fitsToTheRight", e.ClientX, 300);
        if (!fitsRight)
        {
            offset = (e.ClientX - e.OffsetX - 195, offset.y);
        }
    }

    public void SetColor(string? hex)
    {
        if (hex == null)
        {
            return;
        }
        color = hex;
    }

    public void SetCanDelete(bool canDelete)
    {
        this.canDelete = canDelete;
    }

    public void SetOnColorChanged(Action<string> onColorChanged)
    {
        this.onColorChanged = onColorChanged;
    }

    public Task<(string?,bool)> ShowAsync()
    {
        IsVisible = true;
        _tcs = new();
        StateHasChanged();
        return _tcs.Task;
    }

    private void CloseModal(string? color)
    {
        canDelete = false;
        onColorChanged = null;
        IsVisible = false;
        _tcs?.SetResult((color,false));
        StateHasChanged();
    }

    public static bool IsValidHexColor(string hexColor)
    {
        string pattern = @"^#(?:[0-9a-fA-F]{3}){1,2}$";
        Regex regex = new Regex(pattern);
        return regex.IsMatch(hexColor);
    }

    private void DeleteColor()
    {
        IsVisible = false;
        _tcs?.SetResult((null, true));
        StateHasChanged();
    }
}
