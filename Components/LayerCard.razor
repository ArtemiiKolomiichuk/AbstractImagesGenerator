<div class="@(IsFinalBlending ? "layer-card final-blending" : (Layer is Blending ? "layer-card blending" : "layer-card"))">
    <div class="card-header">
        <div style="display: flex; align-items: center;">
            @if (!IsFinalBlending)
            {
                <div class="drag-handle" style="cursor: grab; -webkit-user-select: none; margin-right: 0.1rem;">
                    <Ico Icon="@Icons.Drag" Size="2" Color="#2e2e2e" />
                </div>
            }
            else
            {
                <div style="width:0.3rem"></div>
            }

            <div style="display:flex; flex-direction: column; margin-top: -5px;">
                @if (!editingTitle)
                {
                    <div style="display: flex; align-items: baseline;">
                        @if(Layer.Title == LayerType)
                        {
                            <Tooltip Text="@Layer.Description" />
                        }
                        <div style="display: flex; align-items:center;height: 1.4rem; margin-top: 3px;" @onclick="EditTitle">
                            @Layer.Title
                            <Ico Class="icon-button" Icon="@Icons.Edit" Size="1.4" Color="#757575" />
                        </div>
                    </div>
                }
                else
                {
                    <div style="display: flex; align-items:center;height: 1.4rem; margin-top: 3px;" @onfocusout="() => {editingTitle = false; StateHasChanged();}">
                        <input @ref="editTitleInput" type="text" @bind-value="Layer.Title" @onsubmit="() => { editingTitle = false; StateHasChanged(); }" @onfocusout="() => { editingTitle = false; StateHasChanged(); }">
                    </div>
                }
                @if (Layer.Title != LayerType)
                {
                    <div style="margin-top: -5px; color:#545454">
                        <i>
                            <Tooltip Text="@Layer.Description">@LayerType</Tooltip>
                        </i>
                    </div>
                }
            </div>
        </div>
        <div style="display:flex;margin-left: 2rem;">
            <!--CONTENT VISIBILITY-->
            @if (!IsFinalBlending)
            {
                if(Layer.HideContent)
                {
                    <div title="Details Hidden" style="cursor:pointer; margin-right: 4px; display:flex;" 
                    @onclick="() => {
                            Layer.HideContent = false;
                            StateHasChanged();
                        }">
                        <Ico Class="icon-button grey" Icon="@Icons.NoList" Size="2" Color="#414141" />
                    </div>
                }
                else
                {
                    <div title="Details Shown" style="cursor:pointer; margin-right: 2px; display:flex;"
                    @onclick="() => {
                            Layer.HideContent = true;
                            StateHasChanged();
                        }">
                        <Ico Class="icon-button grey" Icon="@Icons.List" Size="2" Color="#414141" />
                    </div>
                }
            }
            <!--LOCK-->
            @if (Layer.Seed != null)
            {
                if (ParentLocked)
                {
                    <div title="Inherited Lock" style="cursor:help; margin: 2px 2px 0px -9px; display:flex;">
                        <div style="margin-top: -6px; margin-right:-10px;">
                            <Ico Class="icon-button" Icon="@Icons.ArrowDownRight" Size="2" Color="#41414180" />
                        </div>
                        <Ico Class="icon-button" Icon="@Icons.Lock" Size="2" Color="#41414165" />
                    </div>
                }
                else if (Layer.Locked)
                {
                    <span @onclick="() => { 
                            Layer.Locked = false;
                            Update();
                        }" title="Locked" style="margin-right: 6px;">
                        <Ico Class="icon-button grey" Icon="@Icons.Lock" Size="2" Color="#414141" />
                    </span>
                }
                else
                {
                    <span @onclick="() => { 
                            Layer.Locked = true;
                            Update();
                        }" title="Unlocked" style="margin-right: 6px;">
                        <Ico Class="icon-button grey" Icon="@Icons.LockOpen" Size="2" Color="#414141" />
                    </span>
                }
            } 
            @if (IsFinalBlending && Layer is Blending _blending)
            {
                <!--ADD LAYER-->
                <span id="final-blending-add-layer" @onclick="async () => {  
                        var layer = await ModalController.ShowAsync(NavManager, false);
                        if(layer == null)
                            return;
                        layer.UpdateInheritedSettings(_blending.HereditarySettings);
                        _blending.SubLayers.Add(layer);
                        StateHasChanged();
                    }" style="margin-right: 6px;"
                title="Add SubLayer">
                    <Ico Class="icon-button violet" Icon="@Icons.ListAdd" Size="2" Color="#7160e8" />
                </span>
                <!--CHANGE BLENDING TYPE-->
                <span id="final-blending-change-type" @onclick="async () => { 
                        var blending = await ModalController.ShowAsync(NavManager, true);
                        if(blending == null || blending.Type == _blending.Type || blending is not Blending)
                            return;
                         var bl = blending as Blending;
                         bl!.SubLayers = [..AbstractImagesGenerator.Pages.Generation.blending.SubLayers.Select(x => x.Copy)];
                         AbstractImagesGenerator.Pages.Generation.blending = bl;
                         bl.SubLayers.ForEach(x => x.UpdateInheritedSettings(bl.HereditarySettings));
                        Update();
                    }" title="Change Type">
                    <Ico Class="icon-button violet" Icon="@Icons.Customize" Size="2" Color="#7160e8" />
                </span>
            }
            else
            {
                @if (Layer is Blending __blending)
                {
                    <!--ADD LAYER-->
                    <span @onclick="async () => {  
                            var layer = await ModalController.ShowAsync(NavManager, false);
                            if(layer == null)
                                return;
                            layer.UpdateInheritedSettings(__blending.HereditarySettings);
                            __blending.SubLayers.Add(layer);
                            StateHasChanged();
                        }" 
                    style="margin-right: 6px;" title="Add SubLayer">
                        <Ico Class="icon-button violet" Icon="@Icons.ListAdd" Size="2" Color="#7160e8" />
                    </span>
                }
                <!--DUPLICATE-->
                <span @onclick="() => {ParentList!.Insert(ParentList.IndexOf(Layer) + 1, Layer.Copy); Update();}" style="margin-right: 5px; margin-top: 1px;" title="Duplicate">
                    <Ico Class="icon-button violet" Icon="@Icons.DuplicateLayer" Size="2" Color="#7160e8" />
                </span>
                <!--DELETE-->
                <span @onclick="() => {ParentList!.Remove(Layer); Update();}" title="Delete">
                    <Ico Class="icon-button red" Icon="@Icons.Delete" Size="2" Color="#f06270" />
                </span>
            }
        </div>
    </div>
    <!-- SETTINGS -->
    @if(!Layer.HideContent && (Layer.Settings.Count > 0 || Layer.InheritedSettings.Count > 0))
    {
        <div class="@(IsFinalBlending ? "blend-settings" : "settings")">
            @foreach(var setting in Layer.Settings)
            {
                var st = setting;
                <SettingRow Setting="st" Update="StateHasChanged"/>
            }
            @foreach (var setting in Layer.InheritedSettings)
            {
                var st = setting;
                <SettingRow Setting="st" Update="StateHasChanged" Inherited/>
            }
        </div>
    }
    <!-- -->
    @if (!Layer.HideContent && Layer is Blending blending)
    {
        <SortableList Class="@(IsFinalBlending ? "inner-list first" : "inner-list")" 
        Id="@blending.Id" Group="Layers" 
        Handle=".drag-handle" Items="blending.SubLayers" 
        OnUpdate="(x) => {SortList(x);StateHasChanged();}" 
        OnMove="x => {LayerListsController.Move(x); Update();}" Context="item">
            <SortableItemTemplate>
                <LayerCard Layer="item" ParentList="blending.SubLayers" Update="Update" ParentLocked="blending.Locked || ParentLocked"/>
            </SortableItemTemplate>
        </SortableList>
    }
</div>

@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@code {
    [Parameter]
    public Layer Layer { get; set; }

    [Parameter]
    public List<Layer>? ParentList { get; set; }

    [Parameter]
    public Action Update { get; set; }

    [Parameter]
    public bool ParentLocked { get; set; } = false;

    private string LayerType { get; set; }

    private bool editingTitle = false;

    private ElementReference? editTitleInput;

    private bool IsFinalBlending => ParentList == null && Layer is Blending blending && blending.InheritedSettings.Count == 0;

    private void SortList((int oldIndex, int newIndex, string toId, string fromId) indices)
    {
        var (oldIndex, newIndex, _, _) = indices;
        var list = Layer switch
        {
            Blending b => b.SubLayers,
            _ => null
        };

        if (list == null) return;

        var itemToMove = list[oldIndex];
        list.RemoveAt(oldIndex);

        if (newIndex < list.Count)
        {
            list.Insert(newIndex, itemToMove);
        }
        else
        {
            list.Add(itemToMove);
        }

        StateHasChanged();
    }

    public async Task EditTitle()
    {
        editingTitle = true; 
        StateHasChanged();
        await Task.Delay(10);
        if (editTitleInput == null || editTitleInput.Value.Id == null) return;
        await editTitleInput.Value.FocusAsync();
    }

    public async Task<string> GetLayerType()
    {
        return Layer switch
        {
            Blending b => (await Blending.GetLayerOptions(NavManager)).First(l => l.Type == b.Type).Title,
            Drawing d => (await Drawing.GetLayerOptions(NavManager)).First(l => l.Type == d.Type).Title,
            _ => throw new NotImplementedException()
        };    
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        LayerType = await GetLayerType();
    }
}
