<div class="@(!IsFinalBlending && Layer is Blending ? "layer-card blending" : "layer-card")" style="@(IsFinalBlending ? "padding: 0.5rem; background-color: #f7f7fb;min-width:40vw" : "")">
    <div style="display: flex; justify-content: space-between;">
        <div style="display: flex; align-items: center;">
            @if (!IsFinalBlending)
            {
                <div class="drag-handle" style="cursor: grab; -webkit-user-select: none;">
                    <Ico Icon="@Icons.Drag" Size="2" Color="#2e2e2e" />
                </div>
            }
            else
            {
                <div style="width:0.3rem"></div>
            }
            <div style="display:flex; flex-direction: column;">
                @if (!editingTitle)
                {
                    <div style="display: flex; align-items:center;height: 1.4rem; margin-top: 3px;" @onclick="EditTitle">
                        @Layer.title
                        <Ico Class="icon-button" Icon="@Icons.Edit" Size="1.4" Color="#757575" />
                    </div>
                }
                else
                {
                    <div style="display: flex; align-items:center;height: 1.4rem; margin-top: 3px;" @onfocusout="() => {editingTitle = false; StateHasChanged();}">
                        <input @ref="editTitleInput" type="text" @bind-value="Layer.title" @onsubmit="() => { editingTitle = false; StateHasChanged(); }" @onfocusout="() => { editingTitle = false; StateHasChanged(); }">
                    </div>
                }

                <div style="margin-top: -5px; color:#545454">
                    <i>@Layer.type</i>
                </div>
            </div>
        </div>
        <div>
            @if (IsFinalBlending)
            {
                <!--CHANGE BLENDING TYPE-->
                <span @onclick="() => { Update();}">
                    <Ico Class="icon-button violet" Icon="@Icons.Customize" Size="2" Color="#7160e8" />
                </span>
            }
            else
            {
                <!--DELETE-->
                <span @onclick="() => {ParentList!.Remove(Layer); Update();}">
                    <Ico Class="icon-button red" Icon="@Icons.Delete" Size="2" Color="#f06270" />
                </span>
                <!--DUPLICATE-->
                <span @onclick="() => {ParentList!.Insert(ParentList.IndexOf(Layer) + 1, Layer.Copy); Update();}">
                    <Ico Class="icon-button violet" Icon="@Icons.DuplicateLayer" Size="2" Color="#7160e8" />
                </span>
            }
        </div>
    </div>
    <!-- -->
    @if(Layer.settings.Count > 0 || Layer.inheritedSettings.Count > 0)
    {
        <div style="padding-left: 3em;
                padding-top: 0.5em;">
            @foreach(var setting in Layer.settings)
            {
                var st = setting;
                <SettingRow Setting="st" Update="Update"/>
            }
            @foreach (var setting in Layer.inheritedSettings)
            {
                var st = setting;
                <SettingRow Setting="st" Update="Update" />
            }
        </div>
    }
    <!-- -->
    @if (Layer is Blending blending)
    {
        <SortableList Class="inner-list" Id="@blending.Id" Group="Layers" Handle=".drag-handle" Items="blending.subLayers" OnUpdate="@SortList" OnRemove="x => {LayerListsController.Move(x); Update();}" Context="item">
            <SortableItemTemplate>
                <LayerCard Layer="item" ParentList="blending.subLayers" Update="StateHasChanged" />
            </SortableItemTemplate>
            <Footer>
                <div style="display: flex; flex-direction: row-reverse;">
                    <DropdownMenu Text="Add Drawing" Options="@([("Noise", ["Perlin Noise", "Random Noise", "Simple Noise"]), ("Shapes", ["Triangles", "Squares"])])" 
                    OnSelect="((key, option) => {
                                blending.subLayers.Add(new Drawing() 
                                { 
                                    title = option, 
                                    type = key, 
                                    settings = LayerSetting.RandomSettings(), 
                                    inheritedSettings = [..blending.hereditarySettings.Select(s => s.Copy)]
                                });
                                StateHasChanged();
                        })" />

                    <DropdownMenu Text="Add Blending" Options="@([("Blending", ["Normal", "Multiply", "Screen", "Overlay", "Darken", "Lighten"])])"
                    OnSelect="((key, option) => {
                                blending.subLayers.Add(new Blending() 
                                { 
                                    title = option, 
                                    type = key, 
                                    settings = LayerSetting.RandomSettings(), 
                                    inheritedSettings = [..blending.hereditarySettings.Select(s => s.Copy)]
                                });
                                StateHasChanged();
                        })" />
                </div>
            </Footer>
        </SortableList>
    }
</div>

@inject IJSRuntime JSRuntime
@code {
    [Parameter]
    public Layer Layer { get; set; }

    [Parameter]
    public List<Layer>? ParentList { get; set; }

    [Parameter]
    public Action Update { get; set; }

    private bool editingTitle = false;

    private ElementReference? editTitleInput;

    private bool IsFinalBlending => ParentList == null && Layer is Blending blending && blending.inheritedSettings.Count == 0;

    private void SortList((int oldIndex, int newIndex, string toId, string fromId) indices)
    {
        var (oldIndex, newIndex, _, _) = indices;
        var list = Layer switch
        {
            Blending b => b.subLayers,
            _ => null
        };

        if (list == null) return;

        var itemToMove = list[oldIndex];
        list.RemoveAt(oldIndex);

        if (newIndex < list.Count)
        {
            list.Insert(newIndex, itemToMove);
        }
        else
        {
            list.Add(itemToMove);
        }

        StateHasChanged();
    }

    public async Task EditTitle()
    {
        editingTitle = true; 
        StateHasChanged();
        await Task.Delay(10);
        if (editTitleInput == null || editTitleInput.Value.Id == null) return;
        await editTitleInput.Value.FocusAsync();
    }
}
